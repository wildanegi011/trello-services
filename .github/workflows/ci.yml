name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest

    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      SERVER_PORT: ${{ secrets.SERVER_PORT }}
      MODE: development

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25'

      - name: Install dependencies
        run: go mod tidy

      - name: Run tests
        run: go test ./...

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          go test -tags=integration ./...

      - name: Build binary
        run: go build -o bin/trello-services ./cmd/server/main.go

  docker-build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Docker image tag
        id: vars
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "TAG=latest" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/trello-services:${{ steps.vars.outputs.TAG }} .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/trello-services:${{ steps.vars.outputs.TAG }}

  deploy-to-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        run: |
          vercel --prod --yes --token=${{ secrets.VERCEL_TOKEN }}
